페이지 구성 방식 SPA/MPA 렌더링 방식 CSR/SSR
즉, SPA !== CSR

최근 어플리케이션들은 대부분 SPA이니 CSR이 가장 좋은 방식인가?
정답은 아니다. 웹 페이지의 성격에 따라 다릅니다. 적절히 혼용해서 써야한다. 

CSR(ClientSideRendering) 클라이언트와 서버 중 어느 쪽에서 렌더링을 준비하느냐에 따라 구분됩니다.
[개념] 사용자의 요청에 따라 필요한 부분만 응답 받아 렌더링하는 방식

SSR(ServerSideRendering)
[개념] 서버로부터 완전하게 만들어진 HTML파일을 받아와 페이지 전체를 렌더링 하는 방식

SSG(StaticSiteGeneration/ Static Rendering) - SSR과 차이점: 서버에서 요청 시에 즉시 만드느냐, 미리 다 만들어 놓느냐 차이
(HTML 파일의 생성시점이 빌드 타임인지 아닌지의 차이!)
즉, SSR과 SSG 둘 다 서버사이드 렌더링이지만 요청을 보냈을 때 즉시 만드는 SSR은 변동되는 데이터를 반영하기 좋고 SSG는 미리 만들어 놓기 때문에
바뀔 일이 거의 없어서 캐싱해두기 좋은 페이지에 적합합니다. 

CSR 동작방식: 유저가 웹 사이트를 방문하면 서버에 필요한 리소스를 요청하게 됩니다. 
서버는 빈 뼈대 HTML과 연결된 JS 링크를 전달하는데 모든 JS파일을 다운받아야하기 때문에 서버사이드렌더링보다 초기 로딩 속도가 느립니다.
이후에는 변경된 부분과 관련된 데이터만 서버에 요청에서 받아오기 때문에 유저 사용성이 좋고 서버 부하가 적은 장점을 지닙니다. 
하지만 초반에 검색 엔진 크롤러 봇이 빈 HTML을 보고있기 때문에 SEO에는 불리합니다(검색 사이트에 노출되지 않음). 

SSR 동작방식: 유저가 웹 사이트에 방문하면 클라이언트 측에서 서버에 콘텐츠를 요청합니다.  
서버는 렌더링 준비를 마친 CSS가 적용된 HTML과 JS 코드를 브라우저에 전달하는데요. 
전체가 아닌 필요한 자원만 받아오기 때문에 초기 렌더링 속도가 CSR보다 빠릅니다. 

CSR 장점: 빠른 속도(초기화면 로딩 포함X)
          서버 부하 감소-> 필요한 부분만 요청하고 응답하기 때문에 
          사용자 친화적-> 깜빡임 현상 X 
    단점: SEO 불리 -> 서버에서 빈 HTML만 받아오기 때문에
          초기 로딩 속도 느리다.-> 모든 JS파일을 다운 받아오기 때문에

SSR 장점: SEO 유리 
          빠른 초기 로딩
          
    단점: 사용자 친화적이지 않음(TTV와 TTI의 시간 간격차, 요청 응답시 화면 깜빡임-> 불필요한 렌더링)
          서버 부하
          
2. var/let/const 가 무엇이고 차이점은 무엇인가요?

var let const 는 모두 변수 JS 선언 문법입니다.
let const 는 es6에 추가된 비교적 최신 문법이며 세 키워드로 선언된 변수는 모두 호이스팅되지만 let과 const는 선언과 동시에 초기화가 이루어지지 않아
선언문 이전에 호출할 수 없어 레퍼런스 에러를 발생시킵니다.
반면, var로 선언된 변수는 선언과 동시에 undefined 로 초기화가 이루어지기 때문에 선언문 이전에도 호출할 수 있습니다. 
          
